import random

# thu·∫≠t to√°n nh√¢n b√¨nh ph∆∞∆°ng c√≥ l·∫∑p
def modular_exponentiation(x, y, z):
    result = 1
    x = x % z
    while y > 0:
        if y % 2 == 1:
            result = (result * x) % z
        y = y // 2
        x = (x * x) % z
    return result

def miller_rabin(n, t):
        # ƒê·∫ßu v√†o: M·ªôt s·ªë nguy√™n l·∫ª ùëõ ‚â• 3 v√† tham s·ªë an to√†n t ‚â• 1
    if n < 2 or t <= 0:
        return "h·ª£p s·ªë", 0
    s = 0
    r = n - 1
    while r % 2 == 0:
        s += 1
        r //= 2
    probability = 1
    for i in range(t):
        a = random.randint(2, n - 2)
        y = modular_exponentiation(a, r, n)
        if y != 1 and y != n - 1:
            j = 1
            while j <= s - 1 and y != n - 1:
                y = pow(y, 2, n)
                if y == 1:
                    return "h·ª£p s·ªë", probability
                j += 1
            if y != n - 1:
                return "h·ª£p s·ªë", probability
        probability *= (1 - (1 / (4**t)))
    return "nguy√™n t·ªë", probability


def main():
    while True:
        try : 
            n = int(input("Nh·∫≠p N: "))
            t = int(input("Nh·∫≠p s·ªë l·∫ßn th·ª≠ T: "))
        except :
            print("C√°c s·ªë nh·∫≠p l√† int")
            continue
        try :
            assert n > 0 and t > 0
            break
        except :
            print("n > 0 and t > 0")
            continue
    result, probability = miller_rabin(n, t)
    print(f"K·∫øt lu·∫≠n: {n} l√† {result}. X√°c su·∫•t k·∫øt lu·∫≠n sau thu·∫≠t to√°n l√†: {probability}")



if __name__ == "__main__":
    main()
    
# Trong thu·∫≠t to√°n Miller-Rabin, x√°c su·∫•t k·∫øt lu·∫≠n sau thu·∫≠t to√°n ƒë∆∞·ª£c t√≠nh b·∫±ng c√°ch
# T√≠nh t·ªïng c·ªßa t·ª∑ l·ªá kh·∫£ nƒÉng m·ªói l·∫ßn l·∫∑p t c√≥ k·∫øt lu·∫≠n l√† "nguy√™n t·ªë" (1/2^t). 
# V√≠ d·ª•, n·∫øu s·ªë l·∫ßn l·∫∑p t l√† 10, th√¨ x√°c su·∫•t k·∫øt lu·∫≠n sau thu·∫≠t to√°n l√† 1 - (1/4^10)